// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id               String          @id @default(cuid())
    name             String?
    email            String?         @unique
    emailVerified    DateTime?
    image            String?
    isGuest          Boolean         @default(false)
    createdAt        DateTime        @default(now())
    updatedAt        DateTime        @updatedAt
    accounts         Account[]
    sessions         Session[]
    todos            Todo[]
    friendships1     Friendship[]    @relation("UserFriendships1")
    friendships2     Friendship[]    @relation("UserFriendships2")
    sentRequests     FriendRequest[] @relation("SentRequests")
    receivedRequests FriendRequest[] @relation("ReceivedRequests")
    password         String?
    score            Int             @default(0)
    notifications    Notification[]

    @@index([isGuest, createdAt])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Todo {
    id            String   @id @default(cuid())
    title         String
    completed     Boolean  @default(false)
    pointsAwarded Boolean  @default(false)
    userId        String
    user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt
    points        Int      @default(10)
    deadline      DateTime
    failed        Boolean  @default(false)
    amendedOnce   Boolean  @default(false)

    @@index([userId, completed, deadline])
    @@index([userId, failed])
}

model Friendship {
    id        String   @id @default(cuid())
    user1Id   String
    user2Id   String
    createdAt DateTime @default(now())
    user1     User     @relation("UserFriendships1", fields: [user1Id], references: [id])
    user2     User     @relation("UserFriendships2", fields: [user2Id], references: [id])

    @@unique([user1Id, user2Id])
}

model FriendRequest {
    id         String        @id @default(cuid())
    senderId   String
    receiverId String
    status     RequestStatus @default(PENDING)
    createdAt  DateTime      @default(now())
    sender     User          @relation("SentRequests", fields: [senderId], references: [id])
    receiver   User          @relation("ReceivedRequests", fields: [receiverId], references: [id])

    @@unique([senderId, receiverId])
}

model Notification {
    id        String   @id @default(cuid())
    userId    String
    type      String
    message   String
    read      Boolean  @default(false)
    createdAt DateTime @default(now())
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId, read])
}

enum RequestStatus {
    PENDING
    ACCEPTED
    REJECTED
}
